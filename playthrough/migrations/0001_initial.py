# Generated by Django 3.0.4 on 2020-09-17 23:01

from django.db import migrations, models
import django.db.models.deletion
import genki.models
import playthrough.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='RoleTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, help_text="The Role's name.", max_length=100)),
                ('colour', genki.models.HexColourField(blank=True, help_text="The Role's colour in hex.", null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Series',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, help_text="The Series' name.", max_length=255)),
                ('slug', models.SlugField(blank=True, help_text="The Series' slug. Auto-generated.", unique=True)),
            ],
            options={
                'verbose_name_plural': 'series',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', genki.models.DiscordIDField(db_index=True, help_text="The User's Discord ID.", primary_key=True, serialize=False, unique=True)),
                ('bot_admin', models.BooleanField(default=False, help_text='Whether or not the User is a bot admin.')),
            ],
        ),
        migrations.CreateModel(
            name='Guild',
            fields=[
                ('id', genki.models.DiscordIDField(db_index=True, help_text="The Guild's Discord ID.", primary_key=True, serialize=False, unique=True)),
                ('admins', models.ManyToManyField(help_text="The Guild's bot admins.", related_name='admin_for', to='playthrough.User')),
            ],
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, help_text="The Game's name.", max_length=255, unique=True)),
                ('channel_suffix', models.CharField(blank=True, help_text='The suffix for channels for the game.', max_length=10)),
                ('slug', models.SlugField(blank=True, help_text="The Game's slug. Auto-generated.", unique=True)),
                ('completion_role', models.OneToOneField(help_text='The role to grant upon game completion.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='game', to='playthrough.RoleTemplate')),
                ('prequels', models.ManyToManyField(blank=True, help_text="The game's prequels.", related_name='sequels', to='playthrough.Game')),
                ('series', models.ForeignKey(help_text='The Series the Game belongs to.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='games', to='playthrough.Series')),
            ],
        ),
        migrations.CreateModel(
            name='Channel',
            fields=[
                ('id', genki.models.DiscordIDField(db_index=True, help_text="The Channel's Discord ID.", primary_key=True, serialize=False, unique=True)),
                ('game', models.ForeignKey(help_text='The Game the Channel is for.', on_delete=django.db.models.deletion.CASCADE, related_name='channels', to='playthrough.Game')),
                ('guild', models.ForeignKey(help_text='The Guild the Channel is in.', on_delete=django.db.models.deletion.CASCADE, related_name='channels', to='playthrough.Guild')),
                ('owner', models.ForeignKey(help_text='The owner of the Channel.', on_delete=django.db.models.deletion.CASCADE, related_name='channels', to='playthrough.User')),
            ],
        ),
        migrations.CreateModel(
            name='Archive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to=playthrough.models.Archive._get_archive_path)),
                ('channel', models.OneToOneField(help_text='The Channel the archive is for.', on_delete=django.db.models.deletion.CASCADE, related_name='archive', to='playthrough.Channel')),
                ('users', models.ManyToManyField(help_text='The Users that appear within the archive.', related_name='archives', to='playthrough.User')),
            ],
        ),
        migrations.CreateModel(
            name='Alias',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alias', models.CharField(blank=True, help_text='The Alias.', max_length=100, unique=True)),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
        ),
        migrations.CreateModel(
            name='MetaRoleTemplate',
            fields=[
                ('roletemplate_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='playthrough.RoleTemplate')),
                ('expression', models.CharField(help_text="The meta role's expression.", max_length=255)),
                ('games', models.ManyToManyField(help_text='The Games the MetaRole is associated with.', related_name='meta_roles', to='playthrough.Game')),
            ],
            bases=('playthrough.roletemplate',),
        ),
        migrations.CreateModel(
            name='GameConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('completion_role_id', genki.models.DiscordIDField(help_text='The ID of the Role to grant upon game completion.')),
                ('game', models.ForeignKey(help_text='The Game to configure.', on_delete=django.db.models.deletion.CASCADE, related_name='configured_with', to='playthrough.Game')),
                ('guild', models.ForeignKey(help_text='The Guild to configure for.', on_delete=django.db.models.deletion.CASCADE, related_name='games', to='playthrough.Guild')),
            ],
            options={
                'unique_together': {('game', 'guild')},
            },
        ),
    ]
